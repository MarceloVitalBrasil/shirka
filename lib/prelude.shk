-- Copyright (c) 2013, Jeremy Pinat.

------------------------------------------------------------------------------
--                                                                          --
--                              SHIRKA PRELUDE                              --
--                                                                          --
------------------------------------------------------------------------------

-- This module is meant to be implicitly included in all Shirka programs.
-- Operations defined here build upon intrinsic operations to provide
-- common, convenient abstractions.

------------------------------------------------------------------------------
(=> >>)
-- Expected: .. Object
-- Duplicate the object.
  [ -> x x <- x ]

------------------------------------------------------------------------------
(=> <<)
-- Expected: .. Object
-- Drop the object.
  [ -> x ]

------------------------------------------------------------------------------
(=> ><)
-- Expected: .. Object Object
-- Swap the two objects.
  [ -> x -> y <- x <- y ]

------------------------------------------------------------------------------
(=> if)
-- Expected: .. Boolean List
-- The list must contain exactly two other lists. The first one is executed
-- if the boolean is TRUE, and the second one is executed if the boolean is
-- FALSE
  [ uncons -> iftrue
    uncons -> iffalse
    <<
    -> cond
    cond     iftrue  !?
    cond not iffalse !? ]

------------------------------------------------------------------------------
(=> while)
-- Expected: .. List List
-- Take a first list which when executed leaves a boolean object on the stack.
-- Take a second list that is executed as long as the first list leaves TRUE
-- on the stack.
  [ => $while/cond
    => $while/op
    (=> tail)
      [ $while/cond [ $while/op tail ] !? ]
    tail ]

------------------------------------------------------------------------------
(=> times)
-- Expected: .. List Number
-- Execute the list a number of times.
  [ ><
    => $times/op
    ([>> 0 >] while)
      [ 1 -
        -> $times/counter
        $times/op
        <- $times/counter ]
    << ]

------------------------------------------------------------------------------
(=> each)
-- Expected: .. List List
-- Execute the first list with a single element from the second list available
-- on the stack, until no element remains.
  [ => $each/op
    length? -> n
    (<- n times)
      [ uncons ><
        -> $each/remainder
        $each/op
        <- $each/remainder ]
    << ]

------------------------------------------------------------------------------
(=> reverse)
-- Expected: .. List
-- Reverse the order of the elements in the list.
  [ "" ><
    ([length? 0 = not] while)
      [ -> src
        -> dest
        <- src uncons -> el -> src
        <- dest <- el cons
        <- src ]
      << ]

------------------------------------------------------------------------------
(=> gets)
-- Expected: ..
-- Read the standard input stream until a new line is met. Put a list of
-- collected characters on the stack.
  [ "" TRUE
    ([] while)
      [ getc
        >> '\n = not
        (if)
          [ [ cons              TRUE  ]
            [ cons reverse FALSE ] ] ] ]

------------------------------------------------------------------------------
(=> get-value)
-- Expected: ..
-- Read the standard input stream until a new line is met. Parse the collected
-- string as a Shirka program, ensure it contains only one object, then put
-- this object on the stack.
  [ gets $parse
    length? 1 =
    (if)
      [ [ uncons >< << ]
        [ abort        ] ] ]

------------------------------------------------------------------------------
(=> puts)
-- Expected: .. Object
-- Print a string representation of the object on the standard output stream,
-- then start a new line.
  [ print '\n print ]

------------------------------------------------------------------------------
(=> <=)
-- Expected .. Number Number
  [ > not ]

------------------------------------------------------------------------------
(=> >=)
-- Expected .. Number Number
  [ < not ]

------------------------------------------------------------------------------
(=> fold)
-- Expected: .. List List Number
  [ -> seed => $fold/op
    length? 0 = [ abort ] !?

    <- seed ><
    [ $fold/op ] each ]

------------------------------------------------------------------------------
(=> product)
-- Expected: .. List
  [ [*] 1 fold ]

------------------------------------------------------------------------------
(=> sum)
-- Expected: .. List
  [ [+] 0 fold ]

------------------------------------------------------------------------------
(=> ..)
-- Expected: .. Number Number
-- Build a list containing elements from number to number (inclusive).
  [ -> low -> high
    [] <- high >>

    ([low >=] while)
      [ -> current
        current cons
        <- current 1 -
        >> ]
    << ]

------------------------------------------------------------------------------
(=> filter)
-- Expected: .. List List
-- First list is executed on every element of the second list; it must push a
-- boolean on the stack. The final result is a list of all element for which
-- the boolean is TRUE.
  [ => $filter/op
    [] ><

    (each)
      [ >> -> $filter/val
        $filter/op [$filter/val cons] !? ]
    reverse ]

------------------------------------------------------------------------------
(=> map)
  [ => $map/op
    [] ><
    (each)
      [ $map/op cons ]
    reverse ]

------------------------------------------------------------------------------
-- Type predicates

[ type? :List         = ] => List?
[ type? :Boolean      = ] => Boolean?
[ type? :Number       = ] => Number?
[ type? :Character    = ] => Character?
[ type? :Symbol       = ] => Symbol?
[ type? :QuotedSymbol = ] => QuotedSymbol?

------------------------------------------------------------------------------
(=> rescue)
-- Expected: .. error-status List
-- Execute the list only if some error happened.
  [ => $rescue/op
    >> :$try/failed =
    (if)
      [ [ << $rescue/op ]
        [ <<            ] ] ]

------------------------------------------------------------------------------
(=> ++)
-- Expected: .. List List
-- Concatenate two lists.
  [ >< reverse
    ([length? 0 >] while)
      [ uncons >< -> r cons <- r ]
    << ]

------------------------------------------------------------------------------
(=> append)
-- Expected: .. List Object
-- Insert an object at the end of a list.
  [ [] >< cons ++ ]
